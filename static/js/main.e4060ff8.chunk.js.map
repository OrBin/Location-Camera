{"version":3,"sources":["Camera.js","round.js","Geolocation.js","Orientation.js","App.js","serviceWorker.js","index.js"],"names":["Camera","props","render","className","audio","videoConstraints","facingMode","state","videoSize","width","height","updateWindowDimensions","bind","this","window","addEventListener","removeEventListener","setState","innerWidth","innerHeight","Component","round","value","Math","Geolocation","geolocationMessage","coords","latitude","longitude","altitude","heading","Orientation","orientation","absolute","alpha","beta","gamma","App","processLocation","isGeolocationAvailable","isGeolocationEnabled","handleOrientation","event","prevProps","geolocated","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oUA0CeA,E,kDAtCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAuBRC,OAAS,kBACP,kBAAC,IAAD,CACEC,UAAW,SACXC,OAAO,EACPC,iBAAgB,aAEZC,WAAY,eACT,EAAKC,MAAMC,cA7BpB,EAAKD,MAAQ,CAAEE,MAAO,EAAGC,OAAQ,GACjC,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAHb,E,gEAOjBC,KAAKF,yBACLG,OAAOC,iBAAiB,SAAUF,KAAKF,0B,6CAIvCG,OAAOE,oBAAoB,SAAUH,KAAKF,0B,+CAI1CE,KAAKI,SAAS,CACZT,UAAW,CACTC,MAAOK,OAAOI,WACdR,OAAQI,OAAOK,mB,GApBFC,aCFfC,EAAQ,SAAAC,GAAK,OAAIC,KAAKF,MAAc,IAARC,GAAe,KCclCE,EAZK,SAAC,GAAD,IAAEC,EAAF,EAAEA,mBAAoBC,EAAtB,EAAsBA,OAAtB,OAClB,yBAAKvB,UAAW,eAEZuB,EACE,2CAAUA,EAAOC,SAAjB,aAA8BD,EAAOE,UAArC,KAAmDF,EAAOG,SAAP,YAAuBR,EAAMK,EAAOG,UAApC,KAAmD,KAAMH,EAAOI,QAAP,iBAA2BT,EAAMK,EAAOI,UAAa,MAE7J,6BAAML,KCUHM,EAhBK,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAF,OAClB,yBAAK7B,UAAW,eAEZ6B,EAEA,iDACgBA,EAAYC,SAD5B,wBAESZ,EAAMW,EAAYE,OAF3B,wBAGSb,EAAMW,EAAYG,MAH3B,wBAISd,EAAMW,EAAYI,SAG3B,2DCPAC,E,4MACJ9B,MAAQ,CAAEmB,OAAQ,KAAMD,mBAAoB,GAAIO,YAAa,M,EAgB7DM,gBAAkB,WACX,EAAKrC,MAAMsC,uBAEJ,EAAKtC,MAAMuC,qBAEX,EAAKvC,MAAMyB,OAGrB,EAAKT,SAAS,CAACS,OAAQ,EAAKzB,MAAMyB,OAAQD,mBAAoB,OAF9D,EAAKR,SAAS,CAACS,OAAQ,KAAMD,mBAAoB,6BAFjD,EAAKR,SAAS,CAACS,OAAQ,KAAMD,mBAAoB,+BAFjD,EAAKR,SAAS,CAACS,OAAQ,KAAMD,mBAAoB,+C,EAUrDgB,kBAAoB,SAAAC,GAClB,EAAKzB,SAAS,CAACe,YAAaU,K,EAG9BxC,OAAS,kBACP,oCACE,kBAAC,EAAD,CACEuB,mBAAoB,EAAKlB,MAAMkB,mBAC/BC,OAAQ,EAAKnB,MAAMmB,SAErB,kBAAC,EAAD,CAAaM,YAAa,EAAKzB,MAAMyB,cACrC,kBAAC,EAAD,Q,kEArCFnB,KAAKyB,kBACLxB,OAAOC,iBAAiB,4BAA6BF,KAAK4B,mBAAmB,K,yCAG5DE,GACbA,IAAc9B,KAAKZ,OACrBY,KAAKyB,oB,6CAKPxB,OAAOE,oBAAoB,4BAA6BH,KAAK4B,mBAAmB,O,GAdlErB,aA6CHwB,uBAAW,GAAXA,CAAeP,GCzCVQ,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAAS/C,OACP,kBAAC,IAAMgD,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e4060ff8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Webcam from 'react-webcam';\n\nclass Camera extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { width: 0, height: 0 };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      videoSize: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      }\n    });\n  }\n\n  render = () => (\n    <Webcam\n      className={'camera'}\n      audio={false}\n      videoConstraints={\n        {\n          facingMode: \"environment\",\n          ...this.state.videoSize,\n        }\n      }\n    />\n  );\n}\n\nexport default Camera;\n","\nconst round = value => Math.round(value * 100) / 100;\n\nexport {\n  round,\n};\n","import React from 'react';\nimport { round } from './round';\n\nconst Geolocation = ({geolocationMessage, coords}) => (\n  <div className={'geolocation'}>\n    {\n      coords ? (\n        <div>({`${coords.latitude}, ${coords.longitude})`}{coords.altitude ? `, ${round(coords.altitude)}m` : null}{coords.heading ? `, hdg: ${round(coords.heading)}` : null}</div>\n      ) : (\n            <div>{geolocationMessage}</div>\n          )\n      }\n  </div>\n);\n\nexport default Geolocation;\n","import React from 'react';\nimport { round } from './round';\n\nconst Orientation = ({orientation}) => (\n  <div className={'orientation'}>\n    {\n      orientation\n      ?\n      <div>\n        {`Absolute: ${orientation.absolute}, `}\n        {`α: ${round(orientation.alpha)}, `}\n        {`β: ${round(orientation.beta)}, `}\n        {`γ: ${round(orientation.gamma)}`}\n      </div>\n      :\n      <div>No orientation available</div>\n    }\n  </div>\n);\nexport default Orientation;\n","import React, { Component } from 'react';\nimport { geolocated } from \"react-geolocated\";\nimport './App.css';\nimport Camera from './Camera';\nimport Geolocation from './Geolocation';\nimport Orientation from './Orientation';\n\n\nclass App extends Component {\n  state = { coords: null, geolocationMessage: '', orientation: null}\n  componentDidMount() {\n    this.processLocation();\n    window.addEventListener('deviceorientationabsolute', this.handleOrientation, true);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.processLocation();\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('deviceorientationabsolute', this.handleOrientation, true);\n  }\n\n  processLocation = () => {\n    if (!this.props.isGeolocationAvailable) {\n      this.setState({coords: null, geolocationMessage: \"Your browser does not support Geolocation\"});\n    } else if (!this.props.isGeolocationEnabled) {\n      this.setState({coords: null, geolocationMessage: \"Geolocation is not enabled\"});\n    } else if (!this.props.coords) {\n      this.setState({coords: null, geolocationMessage: \"Getting location data...\"});\n    } else {\n      this.setState({coords: this.props.coords, geolocationMessage: null});\n    }\n  };\n\n  handleOrientation = event => {\n    this.setState({orientation: event})\n  };\n\n  render = () => (\n    <>\n      <Geolocation\n        geolocationMessage={this.state.geolocationMessage}\n        coords={this.state.coords}\n      />\n      <Orientation orientation={this.state.orientation}/>\n      <Camera />\n    </>\n  );\n}\n\nexport default geolocated({})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}